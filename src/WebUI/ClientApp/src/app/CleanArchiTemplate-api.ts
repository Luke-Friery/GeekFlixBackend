/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.3.0.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IMovieInfoClient {
    passThroughStringMovieInfo(infoId: number): Observable<string>;
    passThroughMovieInfo(infoId: number): Observable<MovieInfo>;
    setInfoCacheLimits(min: number, max: number, mins: number): Observable<FileResponse>;
    clearCache(): Observable<void>;
    getCache(): Observable<string>;
}

@Injectable({
    providedIn: 'root'
})
export class MovieInfoClient implements IMovieInfoClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    passThroughStringMovieInfo(infoId: number): Observable<string> {
        let url_ = this.baseUrl + "/api/MovieInfo/string/{infoId}";
        if (infoId === undefined || infoId === null)
            throw new Error("The parameter 'infoId' must be defined.");
        url_ = url_.replace("{infoId}", encodeURIComponent("" + infoId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPassThroughStringMovieInfo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPassThroughStringMovieInfo(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processPassThroughStringMovieInfo(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    passThroughMovieInfo(infoId: number): Observable<MovieInfo> {
        let url_ = this.baseUrl + "/api/MovieInfo/{infoId}";
        if (infoId === undefined || infoId === null)
            throw new Error("The parameter 'infoId' must be defined.");
        url_ = url_.replace("{infoId}", encodeURIComponent("" + infoId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPassThroughMovieInfo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPassThroughMovieInfo(<any>response_);
                } catch (e) {
                    return <Observable<MovieInfo>><any>_observableThrow(e);
                }
            } else
                return <Observable<MovieInfo>><any>_observableThrow(response_);
        }));
    }

    protected processPassThroughMovieInfo(response: HttpResponseBase): Observable<MovieInfo> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MovieInfo.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MovieInfo>(<any>null);
    }

    setInfoCacheLimits(min: number, max: number, mins: number): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/MovieInfo/SetInfoCacheMinMax&Time/{min}/{max}/{mins}";
        if (min === undefined || min === null)
            throw new Error("The parameter 'min' must be defined.");
        url_ = url_.replace("{min}", encodeURIComponent("" + min)); 
        if (max === undefined || max === null)
            throw new Error("The parameter 'max' must be defined.");
        url_ = url_.replace("{max}", encodeURIComponent("" + max)); 
        if (mins === undefined || mins === null)
            throw new Error("The parameter 'mins' must be defined.");
        url_ = url_.replace("{mins}", encodeURIComponent("" + mins)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetInfoCacheLimits(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetInfoCacheLimits(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processSetInfoCacheLimits(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    clearCache(): Observable<void> {
        let url_ = this.baseUrl + "/api/MovieInfo/ClearCache";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processClearCache(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processClearCache(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processClearCache(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    getCache(): Observable<string> {
        let url_ = this.baseUrl + "/api/MovieInfo/GetCache";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCache(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCache(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processGetCache(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }
}

export interface IMoviePageClient {
    passThroughSerializedMoviePage(pageId: number): Observable<string>;
    passThroughMoviePage(pageId: number): Observable<MovieListCache>;
    setCacheLimits(min: number, max: number, mins: number): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class MoviePageClient implements IMoviePageClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    passThroughSerializedMoviePage(pageId: number): Observable<string> {
        let url_ = this.baseUrl + "/api/MoviePage/string/{pageId}";
        if (pageId === undefined || pageId === null)
            throw new Error("The parameter 'pageId' must be defined.");
        url_ = url_.replace("{pageId}", encodeURIComponent("" + pageId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPassThroughSerializedMoviePage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPassThroughSerializedMoviePage(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processPassThroughSerializedMoviePage(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    passThroughMoviePage(pageId: number): Observable<MovieListCache> {
        let url_ = this.baseUrl + "/api/MoviePage/{pageId}";
        if (pageId === undefined || pageId === null)
            throw new Error("The parameter 'pageId' must be defined.");
        url_ = url_.replace("{pageId}", encodeURIComponent("" + pageId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPassThroughMoviePage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPassThroughMoviePage(<any>response_);
                } catch (e) {
                    return <Observable<MovieListCache>><any>_observableThrow(e);
                }
            } else
                return <Observable<MovieListCache>><any>_observableThrow(response_);
        }));
    }

    protected processPassThroughMoviePage(response: HttpResponseBase): Observable<MovieListCache> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MovieListCache.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MovieListCache>(<any>null);
    }

    setCacheLimits(min: number, max: number, mins: number): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/MoviePage/SetMinMax&Time/{min}/{max}/{mins}";
        if (min === undefined || min === null)
            throw new Error("The parameter 'min' must be defined.");
        url_ = url_.replace("{min}", encodeURIComponent("" + min)); 
        if (max === undefined || max === null)
            throw new Error("The parameter 'max' must be defined.");
        url_ = url_.replace("{max}", encodeURIComponent("" + max)); 
        if (mins === undefined || mins === null)
            throw new Error("The parameter 'mins' must be defined.");
        url_ = url_.replace("{mins}", encodeURIComponent("" + mins)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetCacheLimits(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetCacheLimits(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processSetCacheLimits(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export interface IWeatherForecastClient {
    get(): Observable<WeatherForecast[]>;
}

@Injectable({
    providedIn: 'root'
})
export class WeatherForecastClient implements IWeatherForecastClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    get(): Observable<WeatherForecast[]> {
        let url_ = this.baseUrl + "/api/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<WeatherForecast[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<WeatherForecast[]>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<WeatherForecast[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WeatherForecast[]>(<any>null);
    }
}

export class MovieInfo implements IMovieInfo {
    adult?: boolean;
    backdrop_path?: string | undefined;
    belongs_to_collection?: BelongsToCollection | undefined;
    budget?: number;
    genres?: Genres[] | undefined;
    homepage?: string | undefined;
    id?: number;
    imdb_id?: string | undefined;
    original_language?: string | undefined;
    original_title?: string | undefined;
    overview?: string | undefined;
    popularity?: number;
    poster_path?: string | undefined;
    production_companies?: ProductionCompany[] | undefined;
    production_countries?: ProductionCountry[] | undefined;
    release_date?: string | undefined;
    revenue?: number;
    runtime?: number;
    spoken_languages?: SpokenLanguage[] | undefined;
    status?: string | undefined;
    tagline?: string | undefined;
    title?: string | undefined;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    constructor(data?: IMovieInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.adult = _data["adult"];
            this.backdrop_path = _data["backdrop_path"];
            this.belongs_to_collection = _data["belongs_to_collection"] ? BelongsToCollection.fromJS(_data["belongs_to_collection"]) : <any>undefined;
            this.budget = _data["budget"];
            if (Array.isArray(_data["genres"])) {
                this.genres = [] as any;
                for (let item of _data["genres"])
                    this.genres!.push(Genres.fromJS(item));
            }
            this.homepage = _data["homepage"];
            this.id = _data["id"];
            this.imdb_id = _data["imdb_id"];
            this.original_language = _data["original_language"];
            this.original_title = _data["original_title"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"];
            this.poster_path = _data["poster_path"];
            if (Array.isArray(_data["production_companies"])) {
                this.production_companies = [] as any;
                for (let item of _data["production_companies"])
                    this.production_companies!.push(ProductionCompany.fromJS(item));
            }
            if (Array.isArray(_data["production_countries"])) {
                this.production_countries = [] as any;
                for (let item of _data["production_countries"])
                    this.production_countries!.push(ProductionCountry.fromJS(item));
            }
            this.release_date = _data["release_date"];
            this.revenue = _data["revenue"];
            this.runtime = _data["runtime"];
            if (Array.isArray(_data["spoken_languages"])) {
                this.spoken_languages = [] as any;
                for (let item of _data["spoken_languages"])
                    this.spoken_languages!.push(SpokenLanguage.fromJS(item));
            }
            this.status = _data["status"];
            this.tagline = _data["tagline"];
            this.title = _data["title"];
            this.video = _data["video"];
            this.vote_average = _data["vote_average"];
            this.vote_count = _data["vote_count"];
        }
    }

    static fromJS(data: any): MovieInfo {
        data = typeof data === 'object' ? data : {};
        let result = new MovieInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        data["belongs_to_collection"] = this.belongs_to_collection ? this.belongs_to_collection.toJSON() : <any>undefined;
        data["budget"] = this.budget;
        if (Array.isArray(this.genres)) {
            data["genres"] = [];
            for (let item of this.genres)
                data["genres"].push(item.toJSON());
        }
        data["homepage"] = this.homepage;
        data["id"] = this.id;
        data["imdb_id"] = this.imdb_id;
        data["original_language"] = this.original_language;
        data["original_title"] = this.original_title;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        if (Array.isArray(this.production_companies)) {
            data["production_companies"] = [];
            for (let item of this.production_companies)
                data["production_companies"].push(item.toJSON());
        }
        if (Array.isArray(this.production_countries)) {
            data["production_countries"] = [];
            for (let item of this.production_countries)
                data["production_countries"].push(item.toJSON());
        }
        data["release_date"] = this.release_date;
        data["revenue"] = this.revenue;
        data["runtime"] = this.runtime;
        if (Array.isArray(this.spoken_languages)) {
            data["spoken_languages"] = [];
            for (let item of this.spoken_languages)
                data["spoken_languages"].push(item.toJSON());
        }
        data["status"] = this.status;
        data["tagline"] = this.tagline;
        data["title"] = this.title;
        data["video"] = this.video;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data; 
    }
}

export interface IMovieInfo {
    adult?: boolean;
    backdrop_path?: string | undefined;
    belongs_to_collection?: BelongsToCollection | undefined;
    budget?: number;
    genres?: Genres[] | undefined;
    homepage?: string | undefined;
    id?: number;
    imdb_id?: string | undefined;
    original_language?: string | undefined;
    original_title?: string | undefined;
    overview?: string | undefined;
    popularity?: number;
    poster_path?: string | undefined;
    production_companies?: ProductionCompany[] | undefined;
    production_countries?: ProductionCountry[] | undefined;
    release_date?: string | undefined;
    revenue?: number;
    runtime?: number;
    spoken_languages?: SpokenLanguage[] | undefined;
    status?: string | undefined;
    tagline?: string | undefined;
    title?: string | undefined;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;
}

export class BelongsToCollection implements IBelongsToCollection {
    id?: number;
    name?: string | undefined;
    poster_path?: string | undefined;
    backdrop_path?: string | undefined;

    constructor(data?: IBelongsToCollection) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.poster_path = _data["poster_path"];
            this.backdrop_path = _data["backdrop_path"];
        }
    }

    static fromJS(data: any): BelongsToCollection {
        data = typeof data === 'object' ? data : {};
        let result = new BelongsToCollection();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["poster_path"] = this.poster_path;
        data["backdrop_path"] = this.backdrop_path;
        return data; 
    }
}

export interface IBelongsToCollection {
    id?: number;
    name?: string | undefined;
    poster_path?: string | undefined;
    backdrop_path?: string | undefined;
}

export class Genres implements IGenres {
    id?: number;
    name?: string | undefined;

    constructor(data?: IGenres) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Genres {
        data = typeof data === 'object' ? data : {};
        let result = new Genres();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IGenres {
    id?: number;
    name?: string | undefined;
}

export class ProductionCompany implements IProductionCompany {
    id?: number;
    logo_path?: string | undefined;
    name?: string | undefined;
    origin_country?: string | undefined;

    constructor(data?: IProductionCompany) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.logo_path = _data["logo_path"];
            this.name = _data["name"];
            this.origin_country = _data["origin_country"];
        }
    }

    static fromJS(data: any): ProductionCompany {
        data = typeof data === 'object' ? data : {};
        let result = new ProductionCompany();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["logo_path"] = this.logo_path;
        data["name"] = this.name;
        data["origin_country"] = this.origin_country;
        return data; 
    }
}

export interface IProductionCompany {
    id?: number;
    logo_path?: string | undefined;
    name?: string | undefined;
    origin_country?: string | undefined;
}

export class ProductionCountry implements IProductionCountry {
    iso_3166_1?: string | undefined;
    name?: string | undefined;

    constructor(data?: IProductionCountry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iso_3166_1 = _data["iso_3166_1"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ProductionCountry {
        data = typeof data === 'object' ? data : {};
        let result = new ProductionCountry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["iso_3166_1"] = this.iso_3166_1;
        data["name"] = this.name;
        return data; 
    }
}

export interface IProductionCountry {
    iso_3166_1?: string | undefined;
    name?: string | undefined;
}

export class SpokenLanguage implements ISpokenLanguage {
    iso_639_1?: string | undefined;
    name?: string | undefined;

    constructor(data?: ISpokenLanguage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iso_639_1 = _data["iso_639_1"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): SpokenLanguage {
        data = typeof data === 'object' ? data : {};
        let result = new SpokenLanguage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["iso_639_1"] = this.iso_639_1;
        data["name"] = this.name;
        return data; 
    }
}

export interface ISpokenLanguage {
    iso_639_1?: string | undefined;
    name?: string | undefined;
}

export class MovieListCache implements IMovieListCache {
    references?: number;
    page?: number;
    total_results?: number;
    total_pages?: number;
    results?: Result[] | undefined;

    constructor(data?: IMovieListCache) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.references = _data["references"];
            this.page = _data["page"];
            this.total_results = _data["total_results"];
            this.total_pages = _data["total_pages"];
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Result.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MovieListCache {
        data = typeof data === 'object' ? data : {};
        let result = new MovieListCache();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["references"] = this.references;
        data["page"] = this.page;
        data["total_results"] = this.total_results;
        data["total_pages"] = this.total_pages;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IMovieListCache {
    references?: number;
    page?: number;
    total_results?: number;
    total_pages?: number;
    results?: Result[] | undefined;
}

export class Result implements IResult {
    popularity?: number;
    vote_count?: number;
    video?: boolean;
    poster_path?: string | undefined;
    id?: number;
    adult?: boolean;
    backdrop_path?: string | undefined;
    original_language?: string | undefined;
    original_title?: string | undefined;
    genre_ids?: number[] | undefined;
    title?: string | undefined;
    vote_average?: number;
    overview?: string | undefined;
    release_date?: string | undefined;

    constructor(data?: IResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.popularity = _data["popularity"];
            this.vote_count = _data["vote_count"];
            this.video = _data["video"];
            this.poster_path = _data["poster_path"];
            this.id = _data["id"];
            this.adult = _data["adult"];
            this.backdrop_path = _data["backdrop_path"];
            this.original_language = _data["original_language"];
            this.original_title = _data["original_title"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.title = _data["title"];
            this.vote_average = _data["vote_average"];
            this.overview = _data["overview"];
            this.release_date = _data["release_date"];
        }
    }

    static fromJS(data: any): Result {
        data = typeof data === 'object' ? data : {};
        let result = new Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["popularity"] = this.popularity;
        data["vote_count"] = this.vote_count;
        data["video"] = this.video;
        data["poster_path"] = this.poster_path;
        data["id"] = this.id;
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        data["original_language"] = this.original_language;
        data["original_title"] = this.original_title;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["title"] = this.title;
        data["vote_average"] = this.vote_average;
        data["overview"] = this.overview;
        data["release_date"] = this.release_date;
        return data; 
    }
}

export interface IResult {
    popularity?: number;
    vote_count?: number;
    video?: boolean;
    poster_path?: string | undefined;
    id?: number;
    adult?: boolean;
    backdrop_path?: string | undefined;
    original_language?: string | undefined;
    original_title?: string | undefined;
    genre_ids?: number[] | undefined;
    title?: string | undefined;
    vote_average?: number;
    overview?: string | undefined;
    release_date?: string | undefined;
}

export class WeatherForecast implements IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            this.temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data; 
    }
}

export interface IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}